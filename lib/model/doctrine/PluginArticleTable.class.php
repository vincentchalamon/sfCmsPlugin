<?php

/**
 * PluginArticleTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PluginArticleTable extends Doctrine_Table
{

    /**
     * Returns an instance of this class.
     *
     * @return object PluginArticleTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('PluginArticle');
    }

    public function getArticlesQuery($allowId = null)
    {
        $menuQuery = MenuTable::getInstance()->createQuery("menu")->where("menu.article_id IS NOT NULL");
        if (!is_null($allowId)) {
            $menuQuery->andWhere('menu.article_id != ?', $allowId);
        }
        $menus = $menuQuery->execute();
        return $this->createQuery("article")
                        ->whereNotIn("article.id", array_values($menus->toKeyValueArray("id", "article_id")))
                        ->andWhere("article.content_type = ?", Article::ARTICLE);
    }

    public function findArticles()
    {
        return $this->createQuery("article")
                        ->innerJoin("article.Author author")
                        ->where("article.content_type = ?", Article::ARTICLE)
                        ->andWhere("article.deleted_at IS NULL");
    }

    public function findPartials()
    {
        return $this->createQuery("article")
                        ->innerJoin("article.Author author")
                        ->where("article.content_type = ?", Article::PARTIAL)
                        ->andWhere("article.deleted_at IS NULL");
    }

    public function getSearchQuery($query)
    {
        $ids = array();
        $results = $this->search($query);
        foreach ($results as $result) {
            $ids[] = $result['id'];
        }

        $query = TagTable::getObjectTaggedWithQuery($this->getClassnameToReturn(), $query);
        $query->andWhere($query->getRootAlias().".content_type = ?", Article::ARTICLE)
                ->andWhere($query->getRootAlias().".started_at IS NOT NULL AND ".$query->getRootAlias().".started_at <= NOW()")
                ->andWhere($query->getRootAlias().".ended_at IS NULL OR ".$query->getRootAlias().".ended_at >= NOW()")
                ->andWhere($query->getRootAlias().".deleted_at IS NULL");
        return count($ids) ? $query->orWhereIn($query->getRootAlias().".id", $ids) : $query;
    }

    public function findOneBySlugAndContentType($slug, $contentType)
    {
        return $this->createQuery("a")
                        ->where("a.slug = ?", $slug)
                        ->andWhere("a.content_type = ?", $contentType)
                        ->andWhere("a.deleted_at IS NULL")
                        ->leftJoin("a.Menus m")
                        ->fetchOne();
    }
}